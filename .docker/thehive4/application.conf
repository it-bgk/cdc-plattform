db {
  provider: janusgraph
  janusgraph {
    storage {
      backend: cql
      hostname: [
        ${?CASSANDRA_DB_HOSTNAME}
      ] # seed node ip addresses

      #username: "<cassandra_username>"       # login to connect to database (if configured in Cassandra)
      #password: "<cassandra_passowrd"

      cql {
        cluster-name: thp       # cluster name
        keyspace: thehive           # name of the keyspace
        local-datacenter: datacenter1   # name of the datacenter where TheHive runs (relevant only on multi datacenter setup)
        # replication-factor: 2 # number of replica
        read-consistency-level: ONE
        write-consistency-level: ONE
      }
    }
  }
}

####
storage {
  provider = localfs
  localfs.location = /opt/thp_data/files/thehive
}


## Authentication configuration
# More information at https://github.com/TheHive-Project/TheHiveDocs/TheHive4/Administration/Authentication.md
//auth {
//  providers: [
//    {name: session}               # required !
//    {name: basic, realm: thehive}
//    {name: local}
//    {name: key}
//  ]
# The format of logins must be valid email address format. If the provided login doesn't contain `@` the following
# domain is automatically appended
//  defaultUserDomain: "thehive.local"
//}

auth {
  providers: [
    {
      name: session
      warning: 60
      timeout: 3600
    }               # required !
    {
      name: basic
      realm: thehive
    }
    {name: local}
    {name: key}    
    # {
    #   name: oauth2
    #   clientId: "CLIENT_ID"
    #   clientSecret: "CLIENT_SECRET"
    #   redirectUri: "http://THEHIVE_URL/api/ssoLogin"
    #   responseType: "code"
    #   grantType: "authorization_code"
    #   authorizationUrl: "http://KEYCLOAK/auth/realms/TENANT/protocol/openid-connect/auth"
    #   authorizationHeader: "Bearer"
    #   tokenUrl: "http://KEYCLOAK/auth/realms/TENANT/protocol/openid-connect/token"
    #   userUrl: "http://KEYCLOAK/auth/realms/TENANT/protocol/openid-connect/userinfo"
    #   scope: ["openid", "email"]
    #   userIdField: "email"
    # }
    {
      name: ad
      # winDomain (string) the Windows domain name (MYDOMAIN)
      winDomain: ${?AUTH_AD_WINDOMAIN}
      # dnsDomain (string) the Windows domain name in DNS format (mydomain.local)
      dnsDomain: ${?AUTH_AD_DNSDOMAIN}
      # useSSL (boolean) indicate if SSL must be used to connect to domain controller. The global trust store of the JVM is used to validate remote certificate (JAVA_OPTS="-Djavax.net.ssl.trustStore=/path/to/truststore.jks")
      useSSL: ${?AUTH_AD_USESSL}
      # hosts (list of string) the addresses of the domain controllers. If missing, the dnsDomain is used.
      hosts: [${?AUTH_AD_HOSTS}]
    }
    # {
    #   name: ldap
    #   # bindDN (string) DN of the service account in LDAP. This account is used to search the user.
    #   bindDN: ${?AUTH_LDAP_BIND_DN}
    #   # bindPW (string) password of the service account.
    #   bindPW: ${?AUTH_LDAP_BIND_PASSWORD}
    #   # baseDN (string) DN where the users are located in.
    #   baseDN: ${?AUTH_LDAP_BASE_DN}
    #   # filter (string) filter used to search the user. "{0}" is replaced by the user login. A valid filter is: (&(uid={0})(objectClass=posixAccount))
    #   filter: ${?AUTH_LDAP_FILTER}
    #   # useSSL (boolean) indicate if SSL must be used to connect to LDAP server. The global trust store of the JVM is used to validate remote certificate (JAVA_OPTS="-Djavax.net.ssl.trustStore=/path/to/truststore.jks")
    #   useSSL: ${?AUTH_LDAP_USESSL}
    #   # hosts (list of string) the addresses of the LDAP servers.
    #   hosts: [${?AUTH_LDAP_HOSTS}]
    # }
  ]
  defaultUserDomain: ${?AUTH_DEFAULTUSERDOMAIN}
}


# ####
play.modules.enabled += org.thp.thehive.connector.cortex.CortexModule
cortex {
  servers = [
    {
      name = local
      url = ${?CORTEX_URL}
      auth {
        type = "bearer"
        key = ${?CORTEX_KEY}
      }
      # HTTP client configuration (SSL and proxy)
      #  wsConfig {}
     # List TheHive organisation which can use this Cortex server. All ("*") by default
     # includedTheHiveOrganisations = ["*"]
     # List TheHive organisation which cannot use this Cortex server. None by default
     # excludedTheHiveOrganisations = []
    }
  ]
  # Check job update time intervalcortex
  refreshDelay = 5 seconds
  # Maximum number of successive errors before give up
  maxRetryOnError = 3
  # Check remote Cortex status time interval
  statusCheckInterval = 1 minute
}


####
## MISP configuration
# More information at https://github.com/TheHive-Project/TheHiveDocs/TheHive4/Administration/Connectors.md
# Enable MISP connector
play.modules.enabled += org.thp.thehive.connector.misp.MispModule
misp {
  interval: 1 hour
  servers: [
    {
      name = "local"            # MISP name
      url = ${?MISP_URL} # URL or MISP
      auth {
        type = key
        key = ${?MISP_KEY}             # MISP API key
      }
      wsConfig {}                        # HTTP client configuration (SSL and proxy)
      # Name of the case template in TheHive that shall be used to import
      # MISP events as cases by default.
      caseTemplate = ${?MISP_CASE_TEMPLATE}
      #
      # Optional tags to add to each observable  imported  from  an  event
      # available on this instance.
      #tags = ["misp-server-id"]
      #
      # The age of the last publish date
      #max-age = 7 days
      #
      # Organization and tags 
      # exclusion {
      #  organisation = ["bad organisation", "other orga"]
      #  tags = ["tag1", "tag2"]
      #  }
      # whitelist {
      #   tags = {"tag1", "tag2"}
      # }
    }
  ]
} 

play.http.secret.key=${?SECRET}
