version: '2.4'

volumes:
    es_data:
        name: es_data
    es_config:
        name: es_config
    acme_data:
        name: acme_data
    misp_redis:
        name: misp_redis
    cassandra_data:
        name: cassandra_data
    minemeld_local:
        name: minemeld_local
    minemeld_logs:
        name: minemeld_logs
    misp_internal_data:
        name: misp_internal_data
    misp_public_data:
        name: misp_public_data
    misp-internal-db_data:
        name: misp-internal-db_data
    misp-public-db_data:
        name: misp-public-db_data

networks:
    egress:
        name: egress
        ipam:
            driver: default
            config:
                - subnet: "${EGRESS_IP_SUBNET}.0/27"
        driver_opts:
            com.docker.network.bridge.name: docker-egress0
    traefik_internal:
        name: traefik_internal
        internal: true
        ipam:
            driver: default
            config:
                - subnet: "${INTERNAL_IP_SUBNET}.0/27"
        driver_opts:
            com.docker.network.bridge.name: docker-traefik0

services:
    # https://containrrr.github.io/watchtower/  
    watchtower:
        image: containrrr/watchtower
        container_name: watchtower
        restart: unless-stopped
        environment: 
            - WATCHTOWER_CLEANUP=true
            - WATCHTOWER_POLL_INTERVAL=300
            - WATCHTOWER_MONITOR_ONLY=false
            - WATCHTOWER_SCHEDULE=0 0 4 * * *
            - WATCHTOWER_NOTIFICATIONS_LEVEL=debug
            #
            - WATCHTOWER_NOTIFICATIONS=email
                # in seconds:
            - WATCHTOWER_NOTIFICATION_EMAIL_DELAY=2
                # to skip cert verify
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_TLS_SKIP_VERIFY=true
            - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${WATCHTOWER_NOTIFICATION_EMAIL_FROM}
            - WATCHTOWER_NOTIFICATION_EMAIL_TO=${WATCHTOWER_NOTIFICATION_EMAIL_TO}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${WATCHTOWER_NOTIFICATION_EMAIL_SERVER}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD}
        networks:
            egress:
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock:ro
        runtime: runc
        mem_limit: 512M
    # https://docs.traefik.io/   
    traefik:
        image: traefik:latest
        restart: unless-stopped
        container_name: traefik
        volumes:
            - acme_data:/etc/traefik/acme
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./DATA/traefik/traefik_dynamic.yml:/traefik_dynamic.yml:ro
            - ${SSL_ROOT_CA}:/ssl/ca:ro
            - ${SSL_CERT}:/ssl/cert:ro
            - ${SSL_KEY}:/ssl/key:ro
        environment: 
            # Entrypoint HTTP
            ## Enable entrypoint
            - TRAEFIK_ENTRYPOINTS_HTTP=true
            ## Set entrypoint to the following port
            - TRAEFIK_ENTRYPOINTS_HTTP_ADDRESS=:80
            # Redirect traefik to https
            - TRAEFIK_ENTRYPOINTS_HTTP_HTTP_REDIRECTIONS_ENTRYPOINT_TO=https
            - TRAEFIK_ENTRYPOINTS_HTTP_HTTP_REDIRECTIONS_ENTRYPOINT_SCHEME=https
            ## Set forwardheaders
            - TRAEFIK_ENTRYPOINTS_HTTP_FORWARDEDHEADERS_INSECURE=true
            #
            # Entrypoint HTTPS
            ## Enable entrypoint
            - TRAEFIK_ENTRYPOINTS_HTTPS=true
            ## Set entrypoint to the following port
            - TRAEFIK_ENTRYPOINTS_HTTPS_ADDRESS=:443
            ## Set forwardheaders
            - TRAEFIK_ENTRYPOINTS_HTTPS_FORWARDEDHEADERS_INSECURE=true
            ## Set TLS on this entrypoint
            - TRAEFIK_ENTRYPOINTS_HTTPS_HTTP_TLS=true
            # Dashboard
            - TRAEFIK_API=true
            - TRAEFIK_API_DASHBOARD=true
            #
            # Provider
            #  Load dynamic configuration from a file.
            - TRAEFIK_PROVIDERS_FILE_FILENAME=/traefik_dynamic.yml
            ## Enable Docker provider
            - TRAEFIK_PROVIDERS_DOCKER=true
            ## Set docker provider endpoint
            - TRAEFIK_PROVIDERS_DOCKER_ENDPOINT=unix:///var/run/docker.sock
            ## Disable docker container default exposion
            - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
            ## Set docker network for watching container
            - TRAEFIK_PROVIDERS_DOCKER_NETWORK=traefik_internal
            # Logging
            - TRAEFIK_LOG=true
            - TRAEFIK_LOG_LEVEL=info
            - TRAEFIK_ACCESSLOG=false
            # Disable SSL certificate verification. (Default: false)
            - TRAEFIK_SERVERSTRANSPORT_INSECURESKIPVERIFY=true
        networks:
            egress:
            traefik_internal:
        ports:
        - 80:80
        - 443:443
        mem_limit: 1G
        labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.rule=Host(`traefik.${FQDN}`)"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.entrypoints=https"
        - "traefik.http.routers.traefik.middlewares=auth"
        - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_BASIC_AUTH_USER}"
    elasticsearch:
        image: itbgk/elasticsearch-oss:7.9.2
        restart: unless-stopped
        container_name: elasticsearch
        networks:
            traefik_internal:
        environment: 
            - node.name=elasticsearch
            - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
            - "http.host=0.0.0.0"
            - "discovery.type=single-node"
            - "transport.host=0.0.0.0"
            - script.allowed_types=inline
            - thread_pool.search.queue_size=100000
            - thread_pool.write.queue_size=10000
            - path.repo=/backup
            - cluster.name=hive
            #- opendistro_security.ssl.http.enabled=false  
        expose:
            - 9200 # HTTP
        volumes:
            - es_data:/usr/share/elasticsearch/data
            - es_config:/usr/share/elasticsearch/config
            #- ./DATA/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
            - ./BACKUP/elasticsearch:/backup
        ulimits:
            memlock:
                soft: -1
                hard: -1
            nofile:
                soft: 65536
                hard: 65536
        mem_limit: 6G
    cortex:
        image: itbgk/cortex:3.1.0-1
        build:
            context: .docker/cortex
            args: 
                VERSION: 3.1.0-1
        restart: unless-stopped
        container_name: cortex
        volumes:
            #- ./DATA/cortex/application.conf:/etc/cortex/application.conf
            - /var/run/docker.sock:/var/run/docker.sock:ro # https://github.com/TheHive-Project/Cortex/issues/260#issuecomment-673292919
            - es_config:/es_config:ro
            - ./DATA/cortex/nslr:/opt/cortex/nslr:ro
            - /tmp/cortex-jobs:/tmp/cortex-jobs
            - ${SSL_ROOT_CA}:/job/input/cacerts:ro
        environment: 
            - SECRET=${CORTEX_SECRET}
            - AUTH=${CORTEX_AUTH}
            - AUTH_AD_DOMAINFQDN=${CORTEX_AUTH_AD_DOMAINFQDN}
            - AUTH_AD_SERVERNAMES=${CORTEX_AUTH_AD_SERVERNAMES}
            - AUTH_AD_DOMAINNAME=${CORTEX_AUTH_AD_DOMAINNAME}
            - AUTH_LDAP_SERVER=${CORTEX_AUTH_LDAP_SERVER}
            - AUTH_LDAP_BIND_DN=${CORTEX_AUTH_LDAP_BIND_DN}
            - AUTH_LDAP_BIND_PASSWORD=${CORTEX_AUTH_LDAP_BIND_PASSWORD}
            - AUTH_LDAP_BASE_DN=${CORTEX_AUTH_LDAP_BASE_DN}
            - AUTH_LDAP_FILTER=${CORTEX_AUTH_LDAP_FILTER}
            - ES_HOSTNAME=${CORTEX_ES_HOSTNAME}
            - ES_URI=${CORTEX_ES_URL}
            - ES_AUTH_USER=${CORTEX_ES_AUTH_USER}
            - ES_AUTH_PW=${CORTEX_ES_AUTH_PW}
            - CONFIG_FILE=${CORTEX_CONFIG_FILE}
            - DOCKER_HOST=${CORTEX_DOCKER_HOST}
            - DOCKER_GID=${CORTEX_DOCKER_GID} # Set the correct local docker group GID
            - JOB_DIRECTORY=${CORTEX_JOB_DIRECTORY}
            - DEBUG=${CORTEX_DEBUG}
            # - JAVA_OPTS=-Djavax.net.ssl.trustStore=/etc/thehive/truststore/truststore.jks
        networks:
            egress:
            traefik_internal:
        depends_on:
        - elasticsearch
        - traefik
        expose:
            - 9001
        runtime: runc
        mem_limit: 8G
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.cortex.rule=Host(`cortex.${FQDN}`)"
            - "traefik.http.services.cortex.loadbalancer.server.port=9001"
            - "traefik.http.routers.cortex.entrypoints=https"
    thehive:
        image: itbgk/thehive4:4.0.3-1
        build:
            context: .docker/thehive4
            args: 
                VERSION: 4.0.3-1
        restart: unless-stopped
        container_name: thehive
        networks:
            egress:
            traefik_internal:
        #volumes:
            #- ./DATA/thehive/application_4.conf:/etc/thehive/application.conf
        depends_on:
        - traefik
        - cassandra
        environment: 
            # https://github.com/TheHive-Project/TheHiveDocs/blob/master/installation/install-guide.md#customize-the-docker-image
            - CORTEX_KEY=${TH_CORTEX_KEY}
            - CORTEX_URL=${TH_CORTEX_URL}
            - SECRET=${TH_SECRET}
            - MISP_URL=${TH_MISP_URL}
            - MISP_KEY=${TH_MISP_KEY}
            - MISP_CASE_TEMPLATE=${TH_MISP_CASE_TEMPLATE}
            - AUTH_AD_WINDOMAIN=${TH_AUTH_AD_WINDOMAIN}
            - AUTH_AD_DNSDOMAIN=${TH_AUTH_AD_DNSDOMAIN}
            - AUTH_AD_USESSL=${TH_AUTH_AD_USESSL:-false}
            - AUTH_AD_HOSTS=${TH_AUTH_AD_HOSTS}
            - CASSANDRA_DB_HOSTNAME=${TH_CASSANDRA_DB_HOSTNAME:-th-cassandra}
            - AUTH_DEFAULTUSERDOMAIN=${TH_AUTH_DEFAULTUSERDOMAIN}
            - DEBUG=${TH_DEBUG}
        expose:
            - 9000
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.thehive.rule=Host(`case.${FQDN}`,`${FQDN}`,`thehive.${FQDN}`)"
            - "traefik.http.services.thehive.loadbalancer.server.port=9000"
            - "traefik.http.routers.thehive.entrypoints=https"
    cassandra:
        image: cassandra:latest
        restart: unless-stopped
        container_name: th-cassandra
        volumes: 
            - cassandra_data:/var/lib/cassandra
        networks: 
            traefik_internal:
        healthcheck:
            test: ["CMD", "cqlsh -e 'describe cluster'|| exit 1"]
            interval: 30s
            timeout: 30s
            retries: 3
            start_period: 60s
    # misp-internal:
    #     image: itbgk/misp:2.4.134
    #     restart: unless-stopped
    #     container_name: misp-internal
    #     networks:
    #         traefik_internal:
    #         egress:
    #     volumes:
    #         - misp_internal_data:/var/www/MISP
    #         - /dev/urandom:/dev/random
    #         #- ${MISP_INTERNAL_DATA_DIR}/web:/var/www/MISP
    #     environment: 
    #         - MYSQL_HOST=${MISP_INTERNAL_MYSQL_HOST}
    #         - MYSQL_DATABASE=${MISP_INTERNAL_MYSQL_DATABASE}
    #         - MYSQL_USER=${MISP_INTERNAL_MYSQL_HOST}
    #         - MYSQL_PASSWORD=${MISP_INTERNAL_MYSQL_PASSWORD}
    #         - MISP_ADMIN_EMAIL=${MISP_INTERNAL_ADMIN_EMAIL}
    #         - MISP_ADMIN_PASSPHRASE=${MISP_INTERNAL_ADMIN_PASSPHRASE}
    #         - MISP_BASEURL=${MISP_INTERNAL_BASEURL}
    #         - POSTFIX_RELAY_HOST=${MISP_INTERNAL_POSTFIX_RELAY_HOST}
    #         - TIMEZONE=${MISP_INTERNAL_TIMEZONE}
    #         - DATA_DIR=${MISP_INTERNAL_DATA_DIR}
    #     depends_on: 
    #         - traefik
    #         - misp-redis
    #         - misp-internal-db
    #     labels:
    #         - "traefik.enable=true"
    #         - "traefik.http.routers.thehive.rule=Host(`misp.${FQDN}`)"
    #         - "traefik.http.routers.thehive.entrypoints=http"
    #         - "traefik.http.services.thehive.loadbalancer.server.port=80"       
    # misp-internal-db:
    #     container_name: misp-internal-db
    #     image: mariadb
    #     restart: unless-stopped
    #     networks:
    #         traefik_internal:
    #     volumes:
    #         #- ${DATA_DIR}/db:/var/lib/mysql
    #         - misp-internal-db_data:/var/lib/mysql
    #     environment:
    #         - MYSQL_DATABASE=${MISP_INTERNAL_MYSQL_DATABASE}
    #         - MYSQL_USER=${MISP_INTERNAL_MYSQL_HOST}
    #         - MYSQL_PASSWORD=${MISP_INTERNAL_MYSQL_PASSWORD}
    #         - MYSQL_ROOT_PASSWORD=${MISP_INTERNAL_MYSQL_ROOT_PASSWORD}
    # misp-public:
    #     image: itbgk/misp:2.4.134
    #     restart: unless-stopped
    #     container_name: misp-public
    #     networks:
    #         traefik_internal:
    #         egress:
    #     volumes:
    #         - misp_public_data:/var/www/MISP
    #         - /dev/urandom:/dev/random
    #         #- ${MISP_PUBLIC_DATA_DIR}/web:/var/www/MISP
    #     environment: 
    #         - MYSQL_HOST=${MISP_PUBLIC_MYSQL_HOST}
    #         - MYSQL_DATABASE=${MISP_PUBLIC_MYSQL_DATABASE}
    #         - MYSQL_USER=${MISP_PUBLIC_MYSQL_HOST}
    #         - MYSQL_PASSWORD=${MISP_PUBLIC_MYSQL_PASSWORD}
    #         - MISP_ADMIN_EMAIL=${MISP_PUBLIC_ADMIN_EMAIL}
    #         - MISP_ADMIN_PASSPHRASE=${MISP_PUBLIC_ADMIN_PASSPHRASE}
    #         - MISP_BASEURL=${MISP_PUBLIC_BASEURL}
    #         - POSTFIX_RELAY_HOST=${MISP_PUBLIC_POSTFIX_RELAY_HOST}
    #         - TIMEZONE=${MISP_PUBLIC_TIMEZONE}
    #         - DATA_DIR=${MISP_PUBLIC_DATA_DIR}
    #     depends_on: 
    #     - traefik
    #     - misp-redis
    #     labels:
    #         - "traefik.enable=true"
    #         - "traefik.http.routers.thehive.rule=Host(`mp.${FQDN}`)"
    #         - "traefik.http.routers.thehive.entrypoints=http"
    #         - "traefik.http.services.thehive.loadbalancer.server.port=80"
    # misp-public-db:
    #     container_name: misp-public-db
    #     image: mariadb
    #     restart: unless-stopped
    #     networks:
    #         traefik_internal:
    #     volumes:
    #         #- ${MISP_PUBLIC_DATA_DIR}/db:/var/lib/mysql
    #         - misp-public-db_data:/var/lib/mysql
    #     environment:
    #         - MYSQL_DATABASE=${MISP_PUBLIC_MYSQL_DATABASE}
    #         - MYSQL_USER=${MISP_PUBLIC_MYSQL_HOST}
    #         - MYSQL_PASSWORD=${MISP_PUBLIC_MYSQL_PASSWORD}
    #         - MYSQL_ROOT_PASSWORD=${MISP_PUBLIC_MYSQL_ROOT_PASSWORD}
    # misp-modules:
    #     image: itbgk/misp-modules
    #     restart: unless-stopped
    #     container_name: misp-modules
    #     volumes: 
    #         - ${SSL_ROOT_CA}:/opt/minemeld/local/certs/sites/ca:ro
    #     networks:
    #         egress:
    #         traefik_internal:
    #     expose:
    #         - 6666
    #     env_file: env/misp-modules.env
    ###
    misp-redis:
        image: redis
        restart: unless-stopped
        container_name: misp-redis
        networks:
            traefik_internal:
        volumes:
            - misp_redis:/data
        command: redis-server --appendonly yes
    ###
    minemeld:
        image: paloaltonetworks/minemeld
        container_name: minemeld
        restart: unless-stopped
        tmpfs: /run
        environment: 
            - REQUESTS_CA_BUNDLE=/opt/minemeld/local/certs/cacert.pem
        volumes: 
            - minemeld_local:/opt/minemeld/local
            - minemeld_logs:/opt/minemeld/log
            # https://live.paloaltonetworks.com/t5/minemeld-discussions/minemeld-outbound-calls-impacted-by-ssl-interception/m-p/133152#M642
            - ${SSL_ROOT_CA}:/opt/minemeld/local/certs/site/custom-root-ca:ro
        networks:
            egress:
            traefik_internal:
        depends_on: 
        - traefik
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.minemeld.rule=Host(`minemeld.${FQDN}`)"
            - "traefik.http.services.minemeld.loadbalancer.server.port=443"
            - "traefik.http.services.minemeld.loadbalancer.server.scheme=https"
            - "traefik.http.routers.minemeld.entrypoints=https"
    ###
    nginx:
        image: nginx:stable-alpine
        restart: unless-stopped
        container_name: nginx-static-files
        volumes:
        - ./DATA/nginx-static-files/:/usr/share/nginx/html/:ro
        networks: 
            traefik_internal:
        depends_on: 
        - traefik
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.nginx-static-files.rule=Host(`s.${FQDN}`)"
            - "traefik.http.services.nginx-static-files.loadbalancer.server.port=80"
    ###