---
image: docker:git
services:
  - docker:dind

include:
  # https://docs.gitlab.com/ee/user/application_security/container_scanning/
  - template: Container-Scanning.gitlab-ci.yml
  # https://docs.gitlab.com/ee/user/application_security/secret_detection/
  - template: Secret-Detection.gitlab-ci.yml
    # License Scanning
  - template: Security/License-Scanning.gitlab-ci.yml
  # Own Template
  - https://gitlab.com/it-bgk/gitlab-templates/-/raw/master/shellcheck.yml

stages:
  - build
  - test
  - release

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  RELEASE_CI_REGISTRY: ""
  #
  #DOCKER_USERNAME
  #DOCKER_PASSWORD
  HUBDOCKERCOM_ORG: itbgk
  #
  #CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  #CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  CORTEX_CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/cortex/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  THEHIVE_CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/thehive4/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  # Final Images
  CORTEX_CONTAINER_RELEASE_IMAGE: $HUBDOCKERCOM_ORG/cortex
  THEHIVE_CONTAINER_RELEASE_IMAGE: $HUBDOCKERCOM_ORG/thehive4
  MISP_MODULES_CONTAINER_RELEASE_IMAGE: $HUBDOCKERCOM_ORG/misp-modules
  ELASTICSEARCH_CONTAINER_RELEASE_IMAGE: $HUBDOCKERCOM_ORG/elasticsearch-oss
  # For Container Scanning
  CLAIR_OUTPUT: Low

before_script:
  # Login to Gitlab Docker Registry
  - echo "$CI_JOB_TOKEN" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  # Save Version to file (will be read by api.py)
  - echo "$CI_COMMIT_REF_NAME BUILD ${CI_COMMIT_SHA:0:8}" > .version
  - git clone https://gitlab.com/it-bgk/helper-scripts.git /helper_scripts
  - curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose
  - curl -L "https://github.com/christian-korneck/docker-pushrm/releases/download/v1.7.0/docker-pushrm_linux_amd64" -o /usr/local/bin/docker-pushrm && chmod +x /usr/local/bin/docker-pushrm
  
container_scanning:
  # https://docs.gitlab.com/ee/user/application_security/container_scanning/
  before_script:
   - echo ""
  parallel:
    matrix:
      - DOCKER_IMAGE: $CORTEX_CONTAINER_TEST_IMAGE
        DOCKERFILE_PATH: .docker/cortex/Dockerfile
      - DOCKER_IMAGE: $THEHIVE_CONTAINER_TEST_IMAGE
        DOCKERFILE_PATH: .docker/thehive/Dockerfile

license_scanning:
  before_script:
   - echo ""

secret_detection:
  before_script:
   - echo ""


###############
build-test-cortex:
  stage: build
  script:
    - /helper_scripts/add_tag_2_.vars.sh docker-compose.yml cortex TAG
    - source .vars
    - docker build --pull --build-arg VERSION=$TAG -t $CORTEX_CONTAINER_TEST_IMAGE .docker/cortex
    - docker push $CORTEX_CONTAINER_TEST_IMAGE

build-test-thehive:
  stage: build
  script:
    - /helper_scripts/add_tag_2_.vars.sh docker-compose.yml thehive4 TAG
    - source .vars
    - docker build --pull --build-arg VERSION=$TAG -t $THEHIVE_CONTAINER_TEST_IMAGE .docker/thehive4
    - docker push $THEHIVE_CONTAINER_TEST_IMAGE

# test:
#   stage: test
#   script:
#     - docker pull $CONTAINER_TEST_IMAGE
#     - docker run $CONTAINER_TEST_IMAGE /script/to/run/another/test
#   except:
#     - master

build-release-cortex:
  stage: release
  script:
    - /helper_scripts/add_tag_2_.vars.sh docker-compose.yml cortex TAG
    - source .vars
    - echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin 
    - docker pull $CORTEX_CONTAINER_TEST_IMAGE
    - docker tag $CORTEX_CONTAINER_TEST_IMAGE $CORTEX_CONTAINER_RELEASE_IMAGE:$TAG
    - docker push $CORTEX_CONTAINER_RELEASE_IMAGE:$TAG
    - docker run --rm -v $PWD/.docker/cortex:/workspace -e DOCKERHUB_REPOSITORY='$CORTEX_CONTAINER_RELEASE_IMAGE' -e DOCKERHUB_USERNAME='$DOCKER_USERNAME' -e DOCKERHUB_PASSWORD='$DOCKER_PASSWORD' -e README_FILEPATH='/workspace/README.md' peterevans/dockerhub-description:2.1.0
  only:
    - master

build-release-thehive:
  stage: release
  script:
    - /helper_scripts/add_tag_2_.vars.sh docker-compose.yml thehive4 TAG
    - source .vars
    - echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin 
    - docker pull $THEHIVE_CONTAINER_TEST_IMAGE
    - docker tag $THEHIVE_CONTAINER_TEST_IMAGE $THEHIVE_CONTAINER_RELEASE_IMAGE:$TAG
    - docker push $THEHIVE_CONTAINER_RELEASE_IMAGE:$TAG
    - docker run --rm -v $PWD/.docker/thehive:/workspace -e DOCKERHUB_REPOSITORY='$THEHIVE_CONTAINER_RELEASE_IMAGE' -e DOCKERHUB_USERNAME='$DOCKER_USERNAME' -e DOCKERHUB_PASSWORD='$DOCKER_PASSWORD' -e README_FILEPATH='/workspace/README.md' peterevans/dockerhub-description:2.1.0
  only:
    - master

build-release-misp-modules:
  stage: release
  script:
    - /helper_scripts/add_tag_2_.vars.sh docker-compose.yml misp-modules TAG
    - source .vars
    # Login to hub.docker.com
    - echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
    # If tag empty use TAG=latest
    - if [ "$TAG" == "" ]; then TAG=latest; fi
    # Add MISP-modules code
    - git clone https://github.com/MISP/misp-modules.git
    - cd misp-modules
    - if [ "$TAG" != "latest" ]; then git checkout v${TAG}; fi
    # Docker build, push
    - docker build --pull -t $MISP_MODULES_CONTAINER_RELEASE_IMAGE:${git rev-parse HEAD} -t $MISP_MODULES_CONTAINER_RELEASE_IMAGE:$TAG docker/
    - docker push $MISP_MODULES_CONTAINER_RELEASE_IMAGE:${git rev-parse HEAD}
    - docker push $MISP_MODULES_CONTAINER_RELEASE_IMAGE:$TAG
    # Update Description
    - docker run --rm -v $PWD/misp-modules:/workspace -e DOCKERHUB_REPOSITORY='$MISP_MODULES_CONTAINER_RELEASE_IMAGE' -e DOCKERHUB_USERNAME='$DOCKER_USERNAME' -e DOCKERHUB_PASSWORD='$DOCKER_PASSWORD' -e README_FILEPATH='/workspace/README.md' peterevans/dockerhub-description:2.1.0
  only:
    - master

retag-release-elasticsearch:
  stage: release
  script:
    - /helper_scripts/add_tag_2_.vars.sh docker-compose.yml elasticsearch-oss TAG
    - source .vars
    - echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin 
    - docker pull docker.elastic.co/elasticsearch/elasticsearch-oss:${TAG}
    - docker tag docker.elastic.co/elasticsearch/elasticsearch-oss:${TAG} itbgk/elasticsearch-oss:${TAG}
    - docker push itbgk/elasticsearch-oss:${TAG}
    - docker run --rm -v $PWD/.docker/elasticsearch:/workspace -e DOCKERHUB_REPOSITORY='$ELASTICSEARCH_CONTAINER_RELEASE_IMAGE' -e DOCKERHUB_USERNAME='$DOCKER_USERNAME' -e DOCKERHUB_PASSWORD='$DOCKER_PASSWORD' -e README_FILEPATH='/workspace/README.md' peterevans/dockerhub-description:2.1.0
  only:
    - master